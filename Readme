# TP Scraping Blog du Mod√©rateur
 
**DZIRI Rayane**
 
Ce projet a pour objectif de scraper le site [blogdumoderateur.com](https://www.blogdumoderateur.com), extraire les articles (titre, image, auteur, date, etc.) et les stocker dans une base de donn√©es MongoDB. Une interface web avec Flask permet de consulter ces articles par sous-cat√©gorie.
 
---
 
##  Fonctionnalit√©s
 
* Scraping des pages de cat√©gorie (ex: /web/page/1, 2, etc.)
* Extraction des donn√©es d'article :
 
  * Titre
  * Thumbnail
  * Auteur
  * Date de publication
  * Sous-cat√©gorie
  * R√©sum√©
  * Images de l'article (avec descriptions)
* Sauvegarde automatique dans MongoDB
* Interface web avec champ de recherche par sous-cat√©gorie
 
---
###  Installer les d√©pendances
 
 
pip install flask pymongo beautifulsoup4 requests
 
## üîé Scraping des articles
 
Lancer le scraping en modifiant si besoin la cat√©gorie dans le script :
 
```python
BASE_URL = "https://www.blogdumoderateur.com"
CATEGORIE = "web"
NB_PAGES = 10  # nombre de pages √† parcourir
```
 
Puis ex√©cuter le script :
python scraping.py
 
 
Les articles sont automatiquement ins√©r√©s dans la base MongoDB.
 
---
 
## Interface Web (Flask)
 
Lancer l'application web Flask avec :
 
 
python app.py
 
 
Puis aller sur [http://127.0.0.1:5000](http://127.0.0.1:5000) pour utiliser l'interface de recherche.
 
Vous pouvez entrer une sous-cat√©gorie comme :
 
* Culture web
* IA
* Formation
* Social
 
---
 
## Technologies utilis√©es
 
* Python 3
* Flask
* BeautifulSoup4
* MongoDB (pymongo)
 
---
 
## Fichiers importants
 
* `scraper.py` : R√©cup√®re les donn√©es des articles et les stocke en base
* `app.py` : Application Flask pour afficher les articles
* `README.md` : Document d'explication du projet (ce fichier)
*  `recherches.py`:il fait la meme chose que flask mais sur vs code
 
---
 
 
**DZIRI Rayane**
 
---
